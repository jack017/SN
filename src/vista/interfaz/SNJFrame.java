/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package vista.interfaz;

import db_connection.Conectadb;
import javax.swing.JOptionPane;
import java.sql.*;
import java.util.Calendar;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;
import model.nomina.Calculos;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.util.JRLoader;
import net.sf.jasperreports.view.JasperViewer;

/**
 *
 * @author adsi
 */
public class SNJFrame extends javax.swing.JFrame {

    /**
     * Creates new form SNJFrame
     */
    Calendar calendar = Calendar.getInstance();

    int rol = 0;

    public SNJFrame() {
        initComponents();
        this.setLocationRelativeTo(null);
        login.setVisible(true);
        ingreso.setVisible(false);
        nomina.setVisible(false);
        menuSecre.setVisible(false);
        actualizar.setVisible(false);
        menuGerente.setVisible(false);
        delete.setVisible(false);
        registro.setVisible(false);
        infoEmple.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        nomina = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel7 = new javax.swing.JLabel();
        salirG = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jTextFieldBuscar = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jComboBoxBuscar = new javax.swing.JComboBox();
        Buscar = new javax.swing.JButton();
        warningBuscar = new javax.swing.JLabel();
        ingreso = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jTextFieldNombre = new javax.swing.JTextField();
        jTextFieldCargo = new javax.swing.JTextField();
        jTextFieldSueldo = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        salirSec = new javax.swing.JButton();
        confirmacion = new javax.swing.JLabel();
        login = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jTextFieldUsuario = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        loginIn = new javax.swing.JButton();
        jPasswordField1 = new javax.swing.JPasswordField();
        warning = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jButton16 = new javax.swing.JButton();
        actualizar = new javax.swing.JPanel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jTextFieldNombreA = new javax.swing.JTextField();
        jTextFieldCargoA = new javax.swing.JTextField();
        jTextFieldSueldoA = new javax.swing.JTextField();
        IActualizar = new javax.swing.JButton();
        confirmacionA = new javax.swing.JLabel();
        atras = new javax.swing.JButton();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jTextFieldBA = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        warningA = new javax.swing.JLabel();
        warningA2 = new javax.swing.JLabel();
        menuSecre = new javax.swing.JPanel();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jLabel17 = new javax.swing.JLabel();
        menuGerente = new javax.swing.JPanel();
        jButton8 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        jButton10 = new javax.swing.JButton();
        jLabel18 = new javax.swing.JLabel();
        delete = new javax.swing.JPanel();
        jTextFielddelete = new javax.swing.JTextField();
        jLabel19 = new javax.swing.JLabel();
        jButtonBdelete = new javax.swing.JButton();
        jLabel20 = new javax.swing.JLabel();
        confirmacionD = new javax.swing.JLabel();
        conDN = new javax.swing.JLabel();
        conDC = new javax.swing.JLabel();
        conDS = new javax.swing.JLabel();
        jButtonDelete = new javax.swing.JButton();
        jButtonAD = new javax.swing.JButton();
        registro = new javax.swing.JPanel();
        jLabel21 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        jPasswordFieldCon1 = new javax.swing.JPasswordField();
        jLabel24 = new javax.swing.JLabel();
        jPasswordField2 = new javax.swing.JPasswordField();
        jComboBox2 = new javax.swing.JComboBox();
        jButton11 = new javax.swing.JButton();
        jLabel25 = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        jTextFieldRU = new javax.swing.JTextField();
        jButton12 = new javax.swing.JButton();
        jLabel27 = new javax.swing.JLabel();
        infoEmple = new javax.swing.JPanel();
        jLabel28 = new javax.swing.JLabel();
        jLabel29 = new javax.swing.JLabel();
        jLabel30 = new javax.swing.JLabel();
        jTextFieldNom = new javax.swing.JTextField();
        jLabel31 = new javax.swing.JLabel();
        jTextFieldCar = new javax.swing.JTextField();
        jButton13 = new javax.swing.JButton();
        jLabelN = new javax.swing.JLabel();
        jLabelC = new javax.swing.JLabel();
        jLabelS = new javax.swing.JLabel();
        jLabelComi = new javax.swing.JLabel();
        jLabelA = new javax.swing.JLabel();
        jLabelD = new javax.swing.JLabel();
        jLabelSal = new javax.swing.JLabel();
        jLabelP = new javax.swing.JLabel();
        jLabelDedu = new javax.swing.JLabel();
        jLabelNe = new javax.swing.JLabel();
        jButton14 = new javax.swing.JButton();
        jLabel32 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMaximumSize(new java.awt.Dimension(1120, 600));
        setMinimumSize(new java.awt.Dimension(1120, 600));
        setResizable(false);

        nomina.setBackground(new java.awt.Color(255, 255, 255));
        nomina.setMaximumSize(new java.awt.Dimension(1120, 600));
        nomina.setMinimumSize(new java.awt.Dimension(1120, 600));
        nomina.setPreferredSize(new java.awt.Dimension(1120, 600));
        nomina.setLayout(null);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nombre", "Cargo", "Sueldo", "Comision", "Auxilio de transporte", "Total devengado", "Salud", "Pension", "Total deducido", "Neto pagado"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);

        nomina.add(jScrollPane1);
        jScrollPane1.setBounds(10, 40, 1100, 470);

        jLabel7.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        jLabel7.setText("Nomina");
        nomina.add(jLabel7);
        jLabel7.setBounds(500, 10, 60, 20);

        salirG.setText("Atras");
        salirG.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salirGActionPerformed(evt);
            }
        });
        nomina.add(salirG);
        salirG.setBounds(970, 520, 90, 30);

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Seleccione", "Nombre", "Cargo", "Sueldo", "Comision", "Auxilio de trasnporte", "Total devengado", "Salud", "Pension", "Total deducido", "Neto Pagado" }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });
        nomina.add(jComboBox1);
        jComboBox1.setBounds(80, 520, 150, 30);

        jLabel8.setText("Ordenar por:");
        nomina.add(jLabel8);
        jLabel8.setBounds(10, 520, 90, 30);

        jLabel9.setText("Buscar:");
        nomina.add(jLabel9);
        jLabel9.setBounds(290, 530, 60, 20);
        nomina.add(jTextFieldBuscar);
        jTextFieldBuscar.setBounds(340, 520, 180, 30);

        jLabel10.setText("por:");
        nomina.add(jLabel10);
        jLabel10.setBounds(540, 530, 50, 20);

        jComboBoxBuscar.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Seleccione", "Nombre", "Cargo" }));
        nomina.add(jComboBoxBuscar);
        jComboBoxBuscar.setBounds(600, 520, 150, 30);

        Buscar.setText("Buscar");
        Buscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BuscarActionPerformed(evt);
            }
        });
        nomina.add(Buscar);
        Buscar.setBounds(770, 520, 80, 30);

        warningBuscar.setForeground(new java.awt.Color(255, 0, 51));
        nomina.add(warningBuscar);
        warningBuscar.setBounds(340, 560, 500, 30);

        ingreso.setBackground(new java.awt.Color(255, 255, 255));
        ingreso.setMaximumSize(new java.awt.Dimension(600, 600));
        ingreso.setMinimumSize(new java.awt.Dimension(600, 600));
        ingreso.setPreferredSize(new java.awt.Dimension(1120, 600));
        ingreso.setLayout(null);

        jLabel3.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        jLabel3.setText("Ingresar datos empleado");
        ingreso.add(jLabel3);
        jLabel3.setBounds(450, 30, 190, 20);

        jLabel4.setText("Nombre");
        ingreso.add(jLabel4);
        jLabel4.setBounds(520, 140, 60, 14);

        jLabel5.setText("Cargo");
        ingreso.add(jLabel5);
        jLabel5.setBounds(520, 210, 60, 14);

        jLabel6.setText("Sueldo");
        ingreso.add(jLabel6);
        jLabel6.setBounds(520, 270, 80, 14);
        ingreso.add(jTextFieldNombre);
        jTextFieldNombre.setBounds(430, 170, 220, 30);
        ingreso.add(jTextFieldCargo);
        jTextFieldCargo.setBounds(430, 230, 220, 30);
        ingreso.add(jTextFieldSueldo);
        jTextFieldSueldo.setBounds(430, 290, 220, 30);

        jButton2.setText("Ingresar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        ingreso.add(jButton2);
        jButton2.setBounds(430, 340, 90, 23);

        salirSec.setText("Atras");
        salirSec.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salirSecActionPerformed(evt);
            }
        });
        ingreso.add(salirSec);
        salirSec.setBounds(550, 340, 100, 23);

        confirmacion.setForeground(new java.awt.Color(0, 204, 51));
        ingreso.add(confirmacion);
        confirmacion.setBounds(450, 90, 240, 30);

        login.setBackground(new java.awt.Color(255, 255, 255));
        login.setMaximumSize(new java.awt.Dimension(600, 600));
        login.setMinimumSize(new java.awt.Dimension(600, 600));
        login.setPreferredSize(new java.awt.Dimension(1120, 600));
        login.setLayout(null);

        jLabel1.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        jLabel1.setText("Usuario");
        login.add(jLabel1);
        jLabel1.setBounds(510, 190, 60, 17);
        login.add(jTextFieldUsuario);
        jTextFieldUsuario.setBounds(420, 220, 240, 30);

        jLabel2.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        jLabel2.setText("Contraseña");
        login.add(jLabel2);
        jLabel2.setBounds(500, 270, 90, 17);

        loginIn.setText("Ingresar");
        loginIn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loginInActionPerformed(evt);
            }
        });
        login.add(loginIn);
        loginIn.setBounds(490, 340, 100, 23);
        login.add(jPasswordField1);
        jPasswordField1.setBounds(420, 290, 240, 30);

        warning.setForeground(new java.awt.Color(255, 0, 0));
        login.add(warning);
        warning.setBounds(460, 130, 290, 40);

        jLabel11.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel11.setText("Sistema Nomina");
        login.add(jLabel11);
        jLabel11.setBounds(460, 30, 270, 60);

        jButton16.setText("Reporte");
        jButton16.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton16ActionPerformed(evt);
            }
        });
        login.add(jButton16);
        jButton16.setBounds(500, 380, 79, 23);

        actualizar.setMaximumSize(new java.awt.Dimension(1120, 600));
        actualizar.setMinimumSize(new java.awt.Dimension(1120, 600));
        actualizar.setPreferredSize(new java.awt.Dimension(1120, 600));
        actualizar.setLayout(null);

        jLabel12.setText("Nombre");
        actualizar.add(jLabel12);
        jLabel12.setBounds(520, 140, 60, 14);

        jLabel13.setText("Cargo");
        actualizar.add(jLabel13);
        jLabel13.setBounds(520, 210, 60, 14);

        jLabel14.setText("Sueldo");
        actualizar.add(jLabel14);
        jLabel14.setBounds(520, 270, 80, 14);
        actualizar.add(jTextFieldNombreA);
        jTextFieldNombreA.setBounds(430, 170, 220, 30);
        actualizar.add(jTextFieldCargoA);
        jTextFieldCargoA.setBounds(430, 230, 220, 30);
        actualizar.add(jTextFieldSueldoA);
        jTextFieldSueldoA.setBounds(430, 290, 220, 30);

        IActualizar.setText("Actualizar");
        IActualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IActualizarActionPerformed(evt);
            }
        });
        actualizar.add(IActualizar);
        IActualizar.setBounds(490, 340, 100, 23);

        confirmacionA.setForeground(new java.awt.Color(0, 204, 51));
        actualizar.add(confirmacionA);
        confirmacionA.setBounds(450, 90, 240, 30);

        atras.setText("Atras");
        atras.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                atrasActionPerformed(evt);
            }
        });
        actualizar.add(atras);
        atras.setBounds(990, 500, 59, 30);

        jLabel15.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel15.setText("Actualizar datos empleados");
        actualizar.add(jLabel15);
        jLabel15.setBounds(400, 20, 300, 50);

        jLabel16.setText("Ingresar nombre del empleado a actualizar:");
        actualizar.add(jLabel16);
        jLabel16.setBounds(310, 510, 210, 14);
        actualizar.add(jTextFieldBA);
        jTextFieldBA.setBounds(530, 500, 230, 30);

        jButton1.setText("Buscar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        actualizar.add(jButton1);
        jButton1.setBounds(780, 500, 65, 30);

        warningA.setForeground(new java.awt.Color(255, 0, 51));
        actualizar.add(warningA);
        warningA.setBounds(530, 540, 140, 20);

        warningA2.setForeground(new java.awt.Color(255, 0, 0));
        actualizar.add(warningA2);
        warningA2.setBounds(450, 410, 190, 30);

        menuSecre.setMaximumSize(new java.awt.Dimension(1120, 600));
        menuSecre.setMinimumSize(new java.awt.Dimension(1120, 600));
        menuSecre.setPreferredSize(new java.awt.Dimension(1120, 600));
        menuSecre.setLayout(null);

        jButton3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButton3.setText("Ingresar un nuevo empleado");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        menuSecre.add(jButton3);
        jButton3.setBounds(310, 70, 240, 200);

        jButton4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButton4.setText("Actualizar empleado");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        menuSecre.add(jButton4);
        jButton4.setBounds(570, 70, 240, 200);

        jButton5.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButton5.setText("Eliminar Empleado");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        menuSecre.add(jButton5);
        jButton5.setBounds(310, 290, 240, 200);

        jButton6.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButton6.setText("Revizar empleados");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });
        menuSecre.add(jButton6);
        jButton6.setBounds(570, 290, 240, 200);

        jButton7.setText("Salir");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });
        menuSecre.add(jButton7);
        jButton7.setBounds(980, 540, 53, 23);

        jLabel17.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel17.setText("Sistema de Nomina");
        menuSecre.add(jLabel17);
        jLabel17.setBounds(490, 20, 140, 17);

        menuGerente.setMaximumSize(new java.awt.Dimension(1120, 600));
        menuGerente.setMinimumSize(new java.awt.Dimension(1120, 600));
        menuGerente.setPreferredSize(new java.awt.Dimension(1120, 600));
        menuGerente.setLayout(null);

        jButton8.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButton8.setText("Revizar empleados");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });
        menuGerente.add(jButton8);
        jButton8.setBounds(280, 160, 240, 190);

        jButton9.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButton9.setText("Registrar nuevo empleado");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });
        menuGerente.add(jButton9);
        jButton9.setBounds(570, 160, 240, 190);

        jButton10.setText("Salir");
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });
        menuGerente.add(jButton10);
        jButton10.setBounds(973, 550, 70, 23);

        jLabel18.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel18.setText("Sistema nomina");
        menuGerente.add(jLabel18);
        jLabel18.setBounds(490, 30, 110, 30);

        delete.setBackground(new java.awt.Color(255, 255, 255));
        delete.setMaximumSize(new java.awt.Dimension(1120, 600));
        delete.setMinimumSize(new java.awt.Dimension(1120, 600));
        delete.setPreferredSize(new java.awt.Dimension(1120, 600));
        delete.setLayout(null);
        delete.add(jTextFielddelete);
        jTextFielddelete.setBounds(420, 100, 230, 40);

        jLabel19.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel19.setText("Ingrese nombre de empleado a eliminar:");
        delete.add(jLabel19);
        jLabel19.setBounds(130, 110, 280, 17);

        jButtonBdelete.setText("Buscar");
        jButtonBdelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonBdeleteActionPerformed(evt);
            }
        });
        delete.add(jButtonBdelete);
        jButtonBdelete.setBounds(690, 100, 90, 40);

        jLabel20.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel20.setText("Sistema Nomina");
        delete.add(jLabel20);
        jLabel20.setBounds(490, 20, 120, 20);

        confirmacionD.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        delete.add(confirmacionD);
        confirmacionD.setBounds(470, 180, 160, 30);

        conDN.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        delete.add(conDN);
        conDN.setBounds(180, 270, 330, 30);

        conDC.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        delete.add(conDC);
        conDC.setBounds(580, 270, 310, 30);

        conDS.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        delete.add(conDS);
        conDS.setBounds(180, 350, 240, 30);

        jButtonDelete.setText("Eliminar");
        jButtonDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDeleteActionPerformed(evt);
            }
        });
        delete.add(jButtonDelete);
        jButtonDelete.setBounds(580, 340, 110, 30);

        jButtonAD.setText("Atras");
        jButtonAD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonADActionPerformed(evt);
            }
        });
        delete.add(jButtonAD);
        jButtonAD.setBounds(990, 550, 80, 30);

        registro.setBackground(new java.awt.Color(255, 255, 255));
        registro.setMaximumSize(new java.awt.Dimension(1120, 600));
        registro.setMinimumSize(new java.awt.Dimension(1120, 600));
        registro.setPreferredSize(new java.awt.Dimension(1120, 600));
        registro.setLayout(null);

        jLabel21.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel21.setText("Registrar nuevo empleado");
        registro.add(jLabel21);
        jLabel21.setBounds(430, 20, 190, 17);

        jLabel22.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel22.setText("Rol");
        registro.add(jLabel22);
        jLabel22.setBounds(510, 90, 40, 14);

        jLabel23.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel23.setText("Contraseña");
        registro.add(jLabel23);
        jLabel23.setBounds(480, 240, 90, 17);
        registro.add(jPasswordFieldCon1);
        jPasswordFieldCon1.setBounds(430, 280, 190, 30);

        jLabel24.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel24.setText("Confirmar contraseña");
        registro.add(jLabel24);
        jLabel24.setBounds(450, 350, 150, 17);
        registro.add(jPasswordField2);
        jPasswordField2.setBounds(430, 400, 190, 30);

        jComboBox2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "gerente", "secretaria", "empleado" }));
        registro.add(jComboBox2);
        jComboBox2.setBounds(440, 120, 170, 30);

        jButton11.setText("Registrar");
        jButton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton11ActionPerformed(evt);
            }
        });
        registro.add(jButton11);
        jButton11.setBounds(470, 480, 100, 30);

        jLabel25.setForeground(new java.awt.Color(255, 0, 0));
        registro.add(jLabel25);
        jLabel25.setBounds(450, 380, 190, 20);

        jLabel26.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel26.setText("Usuario");
        registro.add(jLabel26);
        jLabel26.setBounds(500, 160, 60, 17);
        registro.add(jTextFieldRU);
        jTextFieldRU.setBounds(430, 190, 190, 30);

        jButton12.setText("Atras");
        jButton12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton12ActionPerformed(evt);
            }
        });
        registro.add(jButton12);
        jButton12.setBounds(960, 540, 59, 23);

        jLabel27.setForeground(new java.awt.Color(0, 153, 0));
        registro.add(jLabel27);
        jLabel27.setBounds(440, 50, 180, 20);

        infoEmple.setMaximumSize(new java.awt.Dimension(1120, 600));
        infoEmple.setMinimumSize(new java.awt.Dimension(1120, 600));
        infoEmple.setPreferredSize(new java.awt.Dimension(1120, 600));
        infoEmple.setLayout(null);

        jLabel28.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel28.setText("Sistema de nomina");
        infoEmple.add(jLabel28);
        jLabel28.setBounds(470, 30, 140, 17);

        jLabel29.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel29.setText("Confirmar informacion empleado");
        infoEmple.add(jLabel29);
        jLabel29.setBounds(420, 80, 230, 17);

        jLabel30.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel30.setText("Ingrese nombre:");
        infoEmple.add(jLabel30);
        jLabel30.setBounds(210, 130, 120, 17);
        infoEmple.add(jTextFieldNom);
        jTextFieldNom.setBounds(330, 130, 160, 20);

        jLabel31.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel31.setText("Ingrese cargo:");
        infoEmple.add(jLabel31);
        jLabel31.setBounds(530, 130, 110, 17);
        infoEmple.add(jTextFieldCar);
        jTextFieldCar.setBounds(640, 130, 180, 20);

        jButton13.setText("Mostrar");
        jButton13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton13ActionPerformed(evt);
            }
        });
        infoEmple.add(jButton13);
        jButton13.setBounds(850, 113, 80, 50);

        jLabelN.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        infoEmple.add(jLabelN);
        jLabelN.setBounds(210, 200, 170, 20);

        jLabelC.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        infoEmple.add(jLabelC);
        jLabelC.setBounds(460, 200, 160, 20);

        jLabelS.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        infoEmple.add(jLabelS);
        jLabelS.setBounds(700, 200, 170, 20);

        jLabelComi.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        infoEmple.add(jLabelComi);
        jLabelComi.setBounds(210, 250, 180, 20);

        jLabelA.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        infoEmple.add(jLabelA);
        jLabelA.setBounds(460, 250, 270, 20);

        jLabelD.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        infoEmple.add(jLabelD);
        jLabelD.setBounds(780, 250, 200, 20);

        jLabelSal.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        infoEmple.add(jLabelSal);
        jLabelSal.setBounds(210, 310, 160, 20);

        jLabelP.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        infoEmple.add(jLabelP);
        jLabelP.setBounds(460, 310, 180, 20);

        jLabelDedu.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        infoEmple.add(jLabelDedu);
        jLabelDedu.setBounds(710, 310, 220, 20);

        jLabelNe.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        infoEmple.add(jLabelNe);
        jLabelNe.setBounds(460, 380, 210, 20);

        jButton14.setText("Salir");
        jButton14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton14ActionPerformed(evt);
            }
        });
        infoEmple.add(jButton14);
        jButton14.setBounds(999, 550, 80, 30);

        jLabel32.setForeground(new java.awt.Color(255, 0, 0));
        infoEmple.add(jLabel32);
        jLabel32.setBounds(670, 80, 160, 20);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(login, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(nomina, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ingreso, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(actualizar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(menuSecre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(menuGerente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(delete, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(registro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(infoEmple, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(ingreso, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(nomina, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(login, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(actualizar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(menuSecre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(menuGerente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(delete, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(registro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(infoEmple, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void loginInActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loginInActionPerformed
        // TODO add your handling code here:

        Conectadb sqlite = new Conectadb();
        Connection cn = sqlite.Conectar();
        String user = jTextFieldUsuario.getText();
        char[] ps = jPasswordField1.getPassword();
        String password = new String(ps);
        String rol = null;
        try {
            Statement stmt = cn.createStatement();
            ResultSet rs = stmt.executeQuery("SELECT *FROM ROLES");
            while (rs.next()) {
                if (user.equals(rs.getString(2)) && password.equals(rs.getString(3))) {
                    rol = rs.getString(1);
                    if (rol.equals("gerente")) {
                        login.setVisible(false);
                        ingreso.setVisible(false);
                        nomina.setVisible(false);
                        menuSecre.setVisible(false);
                        actualizar.setVisible(false);
                        menuGerente.setVisible(true);
                        delete.setVisible(false);
                        registro.setVisible(false);
                        infoEmple.setVisible(false);
                        System.out.println("Gerente se ingreso a las " + calendar.getTime().getHours() + ":" + calendar.getTime().getMinutes() + ":" + calendar.getTime().getSeconds() + " el " + calendar.getTime().getDay() + "/" + calendar.getTime().getMonth() + "/" + ((calendar.getTime().getYear()) + 1900));
                    } else if (rol.equals("secretaria")) {
                        login.setVisible(false);
                        ingreso.setVisible(false);
                        nomina.setVisible(false);
                        menuSecre.setVisible(true);
                        actualizar.setVisible(false);
                        menuGerente.setVisible(false);
                        delete.setVisible(false);
                        registro.setVisible(false);
                        infoEmple.setVisible(false);
                        System.out.println("Secretaria ingreso a las " + calendar.getTime().getHours() + ":" + calendar.getTime().getMinutes() + ":" + calendar.getTime().getSeconds() + " el " + calendar.getTime().getDay() + "/" + calendar.getTime().getMonth() + "/" + ((calendar.getTime().getYear()) + 1900));
                    } else if (rol.equals("empleado")) {
                        login.setVisible(false);
                        ingreso.setVisible(false);
                        nomina.setVisible(false);
                        menuSecre.setVisible(false);
                        actualizar.setVisible(false);
                        menuGerente.setVisible(false);
                        delete.setVisible(false);
                        registro.setVisible(false);
                        infoEmple.setVisible(true);
                        jLabel32.setText("");
                        jLabelN.setText("");
                        jLabelC.setText("");
                        jLabelS.setText("");
                        jLabelComi.setText("");
                        jLabelA.setText("");
                        jLabelD.setText("");
                        jLabelSal.setText("");
                        jLabelP.setText("");
                        jLabelDedu.setText("");
                        jLabelNe.setText("");

                        System.out.println("Empleado ingreso a las " + calendar.getTime().getHours() + ":" + calendar.getTime().getMinutes() + ":" + calendar.getTime().getSeconds() + " el " + calendar.getTime().getDay() + "/" + calendar.getTime().getMonth() + "/" + ((calendar.getTime().getYear()) + 1900));
                    }
                } else {
                    warning.setText("Usuario o contraseña incorrecta*");
                }

            }
        } catch (SQLException e) {
        }
    }//GEN-LAST:event_loginInActionPerformed

    private void salirGActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_salirGActionPerformed
        // TODO add your handling code here:
        String r = "";
        login.setVisible(false);
        ingreso.setVisible(false);
        nomina.setVisible(false);
        actualizar.setVisible(false);
        delete.setVisible(false);
        registro.setVisible(false);
        infoEmple.setVisible(false);
        if (rol == 0) {
            menuGerente.setVisible(true);
            menuSecre.setVisible(false);
            r = "Gerente regreso al menu menuGerente";
        } else {
            menuGerente.setVisible(false);
            menuSecre.setVisible(true);
            r = "Secretaria regreso al menu MenuSecre";
        }
        System.out.println(r + " a las " + calendar.getTime().getHours() + ":" + calendar.getTime().getMinutes() + ":" + calendar.getTime().getSeconds() + " el " + calendar.getTime().getDay() + "/" + calendar.getTime().getMonth() + "/" + ((calendar.getTime().getYear()) + 1900));
    }//GEN-LAST:event_salirGActionPerformed

    private void salirSecActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_salirSecActionPerformed
        // TODO add your handling code here:
        login.setVisible(false);
        ingreso.setVisible(false);
        nomina.setVisible(false);
        menuSecre.setVisible(true);
        actualizar.setVisible(false);
        menuGerente.setVisible(false);
        delete.setVisible(false);
        registro.setVisible(false);
        infoEmple.setVisible(false);
        System.out.println("Secretaria regreso al menu MenuSecre a las " + calendar.getTime().getHours() + ":" + calendar.getTime().getMinutes() + ":" + calendar.getTime().getSeconds() + " el " + calendar.getTime().getDay() + "/" + calendar.getTime().getMonth() + "/" + ((calendar.getTime().getYear()) + 1900));
    }//GEN-LAST:event_salirSecActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        Conectadb sqlite = new Conectadb();
        Connection cn = sqlite.Conectar();
        Calculos cl = new Calculos();
        int s = Integer.parseInt(jTextFieldSueldo.getText());
        double sueldo = (double) (s);
        double totalD = cl.Comision() + cl.AuxT(sueldo) + sueldo;
        double totalDed = cl.SaPe(sueldo) * 2;
        double netoP = totalD - totalDed;
        try {
            Statement stmt = cn.createStatement();
            //crea un stmt de la base  de datos
            String ins = "INSERT INTO NOMINAS VALUES(" + cl.Comision() + "," + cl.AuxT(sueldo) + "," + totalD + "," + cl.SaPe(sueldo) + "," + cl.SaPe(sueldo) + "," + totalDed + "," + netoP + ",'" + jTextFieldNombre.getText() + "','" + jTextFieldCargo.getText() + "'," + sueldo + ");";
            int r = stmt.executeUpdate(ins);
            stmt.close();
            cn.close();
            confirmacion.setText("Los datos han sido ingresados con exito*");
            System.out.println("Secretaria ingreso un nuevo empleado a las " + calendar.getTime().getHours() + ":" + calendar.getTime().getMinutes() + ":" + calendar.getTime().getSeconds() + " el " + calendar.getTime().getDay() + "/" + calendar.getTime().getMonth() + "/" + ((calendar.getTime().getYear()) + 1900));
        } catch (SQLException sqle) {
            JOptionPane.showMessageDialog(null, "Error al encontrar el registro");
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        // TODO add your handling code here:
        Conectadb sqlite = new Conectadb();
        Connection cn = sqlite.Conectar();
        String r = "";
        if (rol == 0) {
            r = "Gerente";
        } else {
            r = "Secretaria";
        }
        if (jComboBox1.getSelectedIndex() == 0) {
            try {
                Statement stmt = cn.createStatement();
                ResultSet rs;
                String busquedaSQL = "SELECT * FROM NOMINAS;";

                rs = stmt.executeQuery(busquedaSQL);

                DefaultTableModel tableModel = (DefaultTableModel) jTable1.getModel();
                Object[] filas = new Object[jTable1.getColumnCount()];
                for (int i = jTable1.getRowCount() - 1; i >= 0; i--) {
                    ((DefaultTableModel) jTable1.getModel()).removeRow(i);
                }
                while (rs.next()) {
                    filas[0] = rs.getString(8);
                    filas[1] = rs.getString(9);
                    filas[2] = rs.getDouble(10);
                    filas[3] = rs.getDouble(1);
                    filas[4] = rs.getDouble(2);
                    filas[5] = rs.getDouble(3);
                    filas[6] = rs.getDouble(4);
                    filas[7] = rs.getDouble(5);
                    filas[8] = rs.getDouble(6);
                    filas[9] = rs.getDouble(7);

                    tableModel.addRow(filas);
                }
                rs.close();
                stmt.close();
                cn.close();

            } catch (SQLException sq2) {
                JOptionPane.showMessageDialog(null, "Error al encontrar el registro");
            }

        }

        if (jComboBox1.getSelectedIndex() == 1) {
            try {
                Statement stmt = cn.createStatement();
                ResultSet rs;
                String busquedaSQL = "SELECT * FROM NOMINAS ORDER BY NOMBRE ASC;";

                rs = stmt.executeQuery(busquedaSQL);

                DefaultTableModel tableModel = (DefaultTableModel) jTable1.getModel();
                Object[] filas = new Object[jTable1.getColumnCount()];
                for (int i = jTable1.getRowCount() - 1; i >= 0; i--) {
                    ((DefaultTableModel) jTable1.getModel()).removeRow(i);
                }
                while (rs.next()) {
                    filas[0] = rs.getString(8);
                    filas[1] = rs.getString(9);
                    filas[2] = rs.getDouble(10);
                    filas[3] = rs.getDouble(1);
                    filas[4] = rs.getDouble(2);
                    filas[5] = rs.getDouble(3);
                    filas[6] = rs.getDouble(4);
                    filas[7] = rs.getDouble(5);
                    filas[8] = rs.getDouble(6);
                    filas[9] = rs.getDouble(7);

                    tableModel.addRow(filas);
                }
                rs.close();
                stmt.close();
                cn.close();
                System.out.println(r + " ordeno por NOMBRE a las " + calendar.getTime().getHours() + ":" + calendar.getTime().getMinutes() + ":" + calendar.getTime().getSeconds() + " el " + calendar.getTime().getDay() + "/" + calendar.getTime().getMonth() + "/" + ((calendar.getTime().getYear()) + 1900));
            } catch (SQLException sq2) {
                JOptionPane.showMessageDialog(null, "Error al encontrar el registro");
            }

        }

        if (jComboBox1.getSelectedIndex() == 2) {
            try {
                Statement stmt = cn.createStatement();
                ResultSet rs;
                String busquedaSQL = "SELECT * FROM NOMINAS ORDER BY CARGO ASC;";

                rs = stmt.executeQuery(busquedaSQL);

                DefaultTableModel tableModel = (DefaultTableModel) jTable1.getModel();
                Object[] filas = new Object[jTable1.getColumnCount()];
                for (int i = jTable1.getRowCount() - 1; i >= 0; i--) {
                    ((DefaultTableModel) jTable1.getModel()).removeRow(i);
                }
                while (rs.next()) {
                    filas[0] = rs.getString(8);
                    filas[1] = rs.getString(9);
                    filas[2] = rs.getDouble(10);
                    filas[3] = rs.getDouble(1);
                    filas[4] = rs.getDouble(2);
                    filas[5] = rs.getDouble(3);
                    filas[6] = rs.getDouble(4);
                    filas[7] = rs.getDouble(5);
                    filas[8] = rs.getDouble(6);
                    filas[9] = rs.getDouble(7);

                    tableModel.addRow(filas);
                }
                rs.close();
                stmt.close();
                cn.close();
                System.out.println(r + " ordeno por CARGO a las " + calendar.getTime().getHours() + ":" + calendar.getTime().getMinutes() + ":" + calendar.getTime().getSeconds() + " el " + calendar.getTime().getDay() + "/" + calendar.getTime().getMonth() + "/" + ((calendar.getTime().getYear()) + 1900));
            } catch (SQLException sq2) {
                JOptionPane.showMessageDialog(null, "Error al encontrar el registro");
            }

        }

        if (jComboBox1.getSelectedIndex() == 3) {
            try {
                Statement stmt = cn.createStatement();
                ResultSet rs;
                String busquedaSQL = "SELECT * FROM NOMINAS ORDER BY SUELDO ASC;";

                rs = stmt.executeQuery(busquedaSQL);

                DefaultTableModel tableModel = (DefaultTableModel) jTable1.getModel();
                Object[] filas = new Object[jTable1.getColumnCount()];
                for (int i = jTable1.getRowCount() - 1; i >= 0; i--) {
                    ((DefaultTableModel) jTable1.getModel()).removeRow(i);
                }
                while (rs.next()) {
                    filas[0] = rs.getString(8);
                    filas[1] = rs.getString(9);
                    filas[2] = rs.getDouble(10);
                    filas[3] = rs.getDouble(1);
                    filas[4] = rs.getDouble(2);
                    filas[5] = rs.getDouble(3);
                    filas[6] = rs.getDouble(4);
                    filas[7] = rs.getDouble(5);
                    filas[8] = rs.getDouble(6);
                    filas[9] = rs.getDouble(7);

                    tableModel.addRow(filas);
                }
                rs.close();
                stmt.close();
                cn.close();
                System.out.println(r + " ordeno por SUELDO a las " + calendar.getTime().getHours() + ":" + calendar.getTime().getMinutes() + ":" + calendar.getTime().getSeconds() + " el " + calendar.getTime().getDay() + "/" + calendar.getTime().getMonth() + "/" + ((calendar.getTime().getYear()) + 1900));
            } catch (SQLException sq2) {
                JOptionPane.showMessageDialog(null, "Error al encontrar el registro");
            }

        }

        if (jComboBox1.getSelectedIndex() == 4) {
            try {
                Statement stmt = cn.createStatement();
                ResultSet rs;
                String busquedaSQL = "SELECT * FROM NOMINAS ORDER BY COMISION ASC;";

                rs = stmt.executeQuery(busquedaSQL);

                DefaultTableModel tableModel = (DefaultTableModel) jTable1.getModel();
                Object[] filas = new Object[jTable1.getColumnCount()];
                for (int i = jTable1.getRowCount() - 1; i >= 0; i--) {
                    ((DefaultTableModel) jTable1.getModel()).removeRow(i);
                }
                while (rs.next()) {
                    filas[0] = rs.getString(8);
                    filas[1] = rs.getString(9);
                    filas[2] = rs.getDouble(10);
                    filas[3] = rs.getDouble(1);
                    filas[4] = rs.getDouble(2);
                    filas[5] = rs.getDouble(3);
                    filas[6] = rs.getDouble(4);
                    filas[7] = rs.getDouble(5);
                    filas[8] = rs.getDouble(6);
                    filas[9] = rs.getDouble(7);

                    tableModel.addRow(filas);
                }
                rs.close();
                stmt.close();
                cn.close();
                System.out.println(r + " ordeno por COMISION a las " + calendar.getTime().getHours() + ":" + calendar.getTime().getMinutes() + ":" + calendar.getTime().getSeconds() + " el " + calendar.getTime().getDay() + "/" + calendar.getTime().getMonth() + "/" + ((calendar.getTime().getYear()) + 1900));
            } catch (SQLException sq2) {
                JOptionPane.showMessageDialog(null, "Error al encontrar el registro");
            }

        }

        if (jComboBox1.getSelectedIndex() == 5) {
            try {
                Statement stmt = cn.createStatement();
                ResultSet rs;
                String busquedaSQL = "SELECT * FROM NOMINAS ORDER BY AUXILIO_TRANSPORTE ASC;";

                rs = stmt.executeQuery(busquedaSQL);

                DefaultTableModel tableModel = (DefaultTableModel) jTable1.getModel();
                Object[] filas = new Object[jTable1.getColumnCount()];
                for (int i = jTable1.getRowCount() - 1; i >= 0; i--) {
                    ((DefaultTableModel) jTable1.getModel()).removeRow(i);
                }
                while (rs.next()) {
                    filas[0] = rs.getString(8);
                    filas[1] = rs.getString(9);
                    filas[2] = rs.getDouble(10);
                    filas[3] = rs.getDouble(1);
                    filas[4] = rs.getDouble(2);
                    filas[5] = rs.getDouble(3);
                    filas[6] = rs.getDouble(4);
                    filas[7] = rs.getDouble(5);
                    filas[8] = rs.getDouble(6);
                    filas[9] = rs.getDouble(7);

                    tableModel.addRow(filas);
                }
                rs.close();
                stmt.close();
                cn.close();
                System.out.println(r + " ordeno por AUXILIO DE TRANSPORTE a las " + calendar.getTime().getHours() + ":" + calendar.getTime().getMinutes() + ":" + calendar.getTime().getSeconds() + " el " + calendar.getTime().getDay() + "/" + calendar.getTime().getMonth() + "/" + ((calendar.getTime().getYear()) + 1900));
            } catch (SQLException sq2) {
                JOptionPane.showMessageDialog(null, "Error al encontrar el registro");
            }

        }

        if (jComboBox1.getSelectedIndex() == 6) {
            try {
                Statement stmt = cn.createStatement();
                ResultSet rs;
                String busquedaSQL = "SELECT * FROM NOMINAS ORDER BY TOTAL_DEVENGADO ASC;";

                rs = stmt.executeQuery(busquedaSQL);

                DefaultTableModel tableModel = (DefaultTableModel) jTable1.getModel();
                Object[] filas = new Object[jTable1.getColumnCount()];
                for (int i = jTable1.getRowCount() - 1; i >= 0; i--) {
                    ((DefaultTableModel) jTable1.getModel()).removeRow(i);
                }
                while (rs.next()) {
                    filas[0] = rs.getString(8);
                    filas[1] = rs.getString(9);
                    filas[2] = rs.getDouble(10);
                    filas[3] = rs.getDouble(1);
                    filas[4] = rs.getDouble(2);
                    filas[5] = rs.getDouble(3);
                    filas[6] = rs.getDouble(4);
                    filas[7] = rs.getDouble(5);
                    filas[8] = rs.getDouble(6);
                    filas[9] = rs.getDouble(7);

                    tableModel.addRow(filas);
                }
                rs.close();
                stmt.close();
                cn.close();
                System.out.println(r + " ordeno por TOTAL DEVENGADO a las " + calendar.getTime().getHours() + ":" + calendar.getTime().getMinutes() + ":" + calendar.getTime().getSeconds() + " el " + calendar.getTime().getDay() + "/" + calendar.getTime().getMonth() + "/" + ((calendar.getTime().getYear()) + 1900));
            } catch (SQLException sq2) {
                JOptionPane.showMessageDialog(null, "Error al encontrar el registro");
            }

        }

        if (jComboBox1.getSelectedIndex() == 7) {
            try {
                Statement stmt = cn.createStatement();
                ResultSet rs;
                String busquedaSQL = "SELECT * FROM NOMINAS ORDER BY SALUD ASC;";

                rs = stmt.executeQuery(busquedaSQL);

                DefaultTableModel tableModel = (DefaultTableModel) jTable1.getModel();
                Object[] filas = new Object[jTable1.getColumnCount()];
                for (int i = jTable1.getRowCount() - 1; i >= 0; i--) {
                    ((DefaultTableModel) jTable1.getModel()).removeRow(i);
                }
                while (rs.next()) {
                    filas[0] = rs.getString(8);
                    filas[1] = rs.getString(9);
                    filas[2] = rs.getDouble(10);
                    filas[3] = rs.getDouble(1);
                    filas[4] = rs.getDouble(2);
                    filas[5] = rs.getDouble(3);
                    filas[6] = rs.getDouble(4);
                    filas[7] = rs.getDouble(5);
                    filas[8] = rs.getDouble(6);
                    filas[9] = rs.getDouble(7);

                    tableModel.addRow(filas);
                }
                rs.close();
                stmt.close();
                cn.close();
                System.out.println(r + " ordeno por SALUD a las " + calendar.getTime().getHours() + ":" + calendar.getTime().getMinutes() + ":" + calendar.getTime().getSeconds() + " el " + calendar.getTime().getDay() + "/" + calendar.getTime().getMonth() + "/" + ((calendar.getTime().getYear()) + 1900));
            } catch (SQLException sq2) {
                JOptionPane.showMessageDialog(null, "Error al encontrar el registro");
            }

        }

        if (jComboBox1.getSelectedIndex() == 8) {
            try {
                Statement stmt = cn.createStatement();
                ResultSet rs;
                String busquedaSQL = "SELECT * FROM NOMINAS ORDER BY PENSION ASC;";

                rs = stmt.executeQuery(busquedaSQL);

                DefaultTableModel tableModel = (DefaultTableModel) jTable1.getModel();
                Object[] filas = new Object[jTable1.getColumnCount()];
                for (int i = jTable1.getRowCount() - 1; i >= 0; i--) {
                    ((DefaultTableModel) jTable1.getModel()).removeRow(i);
                }
                while (rs.next()) {
                    filas[0] = rs.getString(8);
                    filas[1] = rs.getString(9);
                    filas[2] = rs.getDouble(10);
                    filas[3] = rs.getDouble(1);
                    filas[4] = rs.getDouble(2);
                    filas[5] = rs.getDouble(3);
                    filas[6] = rs.getDouble(4);
                    filas[7] = rs.getDouble(5);
                    filas[8] = rs.getDouble(6);
                    filas[9] = rs.getDouble(7);

                    tableModel.addRow(filas);
                }
                rs.close();
                stmt.close();
                cn.close();
                System.out.println(r + " ordeno por PENSION a las " + calendar.getTime().getHours() + ":" + calendar.getTime().getMinutes() + ":" + calendar.getTime().getSeconds() + " el " + calendar.getTime().getDay() + "/" + calendar.getTime().getMonth() + "/" + ((calendar.getTime().getYear()) + 1900));
            } catch (SQLException sq2) {
                JOptionPane.showMessageDialog(null, "Error al encontrar el registro");
            }

        }

        if (jComboBox1.getSelectedIndex() == 9) {
            try {
                Statement stmt = cn.createStatement();
                ResultSet rs;
                String busquedaSQL = "SELECT * FROM NOMINAS ORDER BY TOTAL_DEDUCIDO ASC;";

                rs = stmt.executeQuery(busquedaSQL);

                DefaultTableModel tableModel = (DefaultTableModel) jTable1.getModel();
                Object[] filas = new Object[jTable1.getColumnCount()];
                for (int i = jTable1.getRowCount() - 1; i >= 0; i--) {
                    ((DefaultTableModel) jTable1.getModel()).removeRow(i);
                }
                while (rs.next()) {
                    filas[0] = rs.getString(8);
                    filas[1] = rs.getString(9);
                    filas[2] = rs.getDouble(10);
                    filas[3] = rs.getDouble(1);
                    filas[4] = rs.getDouble(2);
                    filas[5] = rs.getDouble(3);
                    filas[6] = rs.getDouble(4);
                    filas[7] = rs.getDouble(5);
                    filas[8] = rs.getDouble(6);
                    filas[9] = rs.getDouble(7);

                    tableModel.addRow(filas);
                }
                rs.close();
                stmt.close();
                cn.close();
                System.out.println(r + " ordeno por TOTAL DEDUCIDO a las " + calendar.getTime().getHours() + ":" + calendar.getTime().getMinutes() + ":" + calendar.getTime().getSeconds() + " el " + calendar.getTime().getDay() + "/" + calendar.getTime().getMonth() + "/" + ((calendar.getTime().getYear()) + 1900));
            } catch (SQLException sq2) {
                JOptionPane.showMessageDialog(null, "Error al encontrar el registro");
            }

        }

        if (jComboBox1.getSelectedIndex() == 10) {
            try {
                Statement stmt = cn.createStatement();
                ResultSet rs;
                String busquedaSQL = "SELECT * FROM NOMINAS ORDER BY NETO_PAGADO ASC;";

                rs = stmt.executeQuery(busquedaSQL);

                DefaultTableModel tableModel = (DefaultTableModel) jTable1.getModel();
                Object[] filas = new Object[jTable1.getColumnCount()];
                for (int i = jTable1.getRowCount() - 1; i >= 0; i--) {
                    ((DefaultTableModel) jTable1.getModel()).removeRow(i);
                }
                while (rs.next()) {
                    filas[0] = rs.getString(8);
                    filas[1] = rs.getString(9);
                    filas[2] = rs.getDouble(10);
                    filas[3] = rs.getDouble(1);
                    filas[4] = rs.getDouble(2);
                    filas[5] = rs.getDouble(3);
                    filas[6] = rs.getDouble(4);
                    filas[7] = rs.getDouble(5);
                    filas[8] = rs.getDouble(6);
                    filas[9] = rs.getDouble(7);

                    tableModel.addRow(filas);
                }
                rs.close();
                stmt.close();
                cn.close();
                System.out.println(r + " ordeno por NETO PAGADO a las " + calendar.getTime().getHours() + ":" + calendar.getTime().getMinutes() + ":" + calendar.getTime().getSeconds() + " el " + calendar.getTime().getDay() + "/" + calendar.getTime().getMonth() + "/" + ((calendar.getTime().getYear()) + 1900));
            } catch (SQLException sq2) {
                JOptionPane.showMessageDialog(null, "Error al encontrar el registro");
            }

        }

    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void BuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BuscarActionPerformed
        // TODO add your handling code here:
        String r = "";
        if (rol == 0) {
            r = "Gerente";
        } else {
            r = "Secretaria";
        }
        try {
            Conectadb sqlite = new Conectadb();
            Connection cn = sqlite.Conectar();
            Statement stmt = cn.createStatement();
            ResultSet rs;
            DefaultTableModel tableModel = (DefaultTableModel) jTable1.getModel();
            Object[] filas = new Object[jTable1.getColumnCount()];
            String termino = jTextFieldBuscar.getText();
            String condicion = "NOMBRE";
            if (jComboBoxBuscar.getSelectedIndex() == 1) {
                condicion = "NOMBRE";
            }
            if (jComboBoxBuscar.getSelectedIndex() == 2) {
                condicion = "CARGO";
            }
            String busquedaSQL = "SELECT * FROM NOMINAS WHERE " + condicion + " = '" + termino + "';";
            System.out.println(busquedaSQL);

            rs = stmt.executeQuery(busquedaSQL);
            if (rs.next() == false) {
                warningBuscar.setText("Empleado o Cargo no existe*");
                for (int i = jTable1.getRowCount() - 1; i >= 0; i--) {
                    ((DefaultTableModel) jTable1.getModel()).removeRow(i);
                }
                rs.close();
                stmt.close();
                cn.close();
            } else {
                busquedaSQL = "SELECT * FROM NOMINAS WHERE " + condicion + " = '" + termino + "';";
                System.out.println(busquedaSQL);

                rs = stmt.executeQuery(busquedaSQL);
                for (int i = jTable1.getRowCount() - 1; i >= 0; i--) {
                    ((DefaultTableModel) jTable1.getModel()).removeRow(i);
                }
                while (rs.next()) {
                    filas[0] = rs.getString(8);
                    filas[1] = rs.getString(9);
                    filas[2] = rs.getDouble(10);
                    filas[3] = rs.getDouble(1);
                    filas[4] = rs.getDouble(2);
                    filas[5] = rs.getDouble(3);
                    filas[6] = rs.getDouble(4);
                    filas[7] = rs.getDouble(5);
                    filas[8] = rs.getDouble(6);
                    filas[9] = rs.getDouble(7);

                    tableModel.addRow(filas);
                }
                rs.close();
                stmt.close();
                cn.close();
            }

            if (condicion.equals("NOMBRE")) {
                System.out.println(r + " busco por NOMBRE a las " + calendar.getTime().getHours() + ":" + calendar.getTime().getMinutes() + ":" + calendar.getTime().getSeconds() + " el " + calendar.getTime().getDay() + "/" + calendar.getTime().getMonth() + "/" + ((calendar.getTime().getYear()) + 1900));
            } else if (condicion.equals("CARGO")) {
                System.out.println(r + " busco por CARGO a las " + calendar.getTime().getHours() + ":" + calendar.getTime().getMinutes() + ":" + calendar.getTime().getSeconds() + " el " + calendar.getTime().getDay() + "/" + calendar.getTime().getMonth() + "/" + ((calendar.getTime().getYear()) + 1900));
            }

        } catch (SQLException sq2) {
            JOptionPane.showMessageDialog(null, "Error al encontrar el registro");
        }
    }//GEN-LAST:event_BuscarActionPerformed

    private void IActualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IActualizarActionPerformed
        // TODO add your handling code here:
        Conectadb sqlite = new Conectadb();
        Connection cn = sqlite.Conectar();
        Calculos cl = new Calculos();
        if (jTextFieldNombreA.getText().equals("") || jTextFieldCargoA.getText().equals("") || jTextFieldSueldoA.getText().equals("")) {
            warningA2.setText("Debe ingresar datos para actualizar*");
        } else {
            int s = Integer.parseInt(jTextFieldSueldoA.getText());
            double sueldo = (double) (s);
            double totalD = cl.Comision() + cl.AuxT(sueldo) + sueldo;
            double totalDed = cl.SaPe(sueldo) * 2;
            double netoP = totalD - totalDed;
            try {
                Statement stmt = cn.createStatement();
                String ins = "UPDATE NOMINAS SET COMISION = " + cl.Comision() + ", AUXILIO_TRANSPORTE = " + cl.AuxT(sueldo) + ", TOTAL_DEVENGADO = " + totalD + ", SALUD = " + cl.SaPe(sueldo) + ", PENSION = " + cl.SaPe(sueldo) + ", TOTAL_DEDUCIDO = " + totalDed + ", NETO_PAGADO = " + netoP + ", NOMBRE = '" + jTextFieldNombreA.getText() + "', CARGO = '" + jTextFieldCargoA.getText() + "', SUELDO = " + sueldo + " WHERE NOMBRE = '" + jTextFieldNombreA.getText() + "');";
                int r = stmt.executeUpdate(ins);
                stmt.close();
                cn.close();
                confirmacionA.setText("Los datos a sido actualizados con exito*");
                System.out.println("Secretaria actualizo un empleado a las " + calendar.getTime().getHours() + ":" + calendar.getTime().getMinutes() + ":" + calendar.getTime().getSeconds() + " el " + calendar.getTime().getDay() + "/" + calendar.getTime().getMonth() + "/" + ((calendar.getTime().getYear()) + 1900));
            } catch (SQLException sqle) {
                JOptionPane.showMessageDialog(null, "Error al actualizar el registro");
            }
        }

    }//GEN-LAST:event_IActualizarActionPerformed

    private void atrasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_atrasActionPerformed
        // TODO add your handling code here:
        login.setVisible(false);
        ingreso.setVisible(false);
        nomina.setVisible(false);
        menuSecre.setVisible(true);
        actualizar.setVisible(false);
        menuGerente.setVisible(false);
        delete.setVisible(false);
        registro.setVisible(false);
        infoEmple.setVisible(false);
        System.out.println("Secretaria regreso al menu MenuScre a las " + calendar.getTime().getHours() + ":" + calendar.getTime().getMinutes() + ":" + calendar.getTime().getSeconds() + " el " + calendar.getTime().getDay() + "/" + calendar.getTime().getMonth() + "/" + ((calendar.getTime().getYear()) + 1900));
    }//GEN-LAST:event_atrasActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        try {
            Conectadb sqlite = new Conectadb();
            Connection cn = sqlite.Conectar();
            Statement stmt = cn.createStatement();
            ResultSet rs;

            String termino = jTextFieldBA.getText();
            String busquedaSQL = "SELECT * FROM NOMINAS WHERE NOMBRE = '" + termino + "';";
            System.out.println(busquedaSQL);

            rs = stmt.executeQuery(busquedaSQL);
            if (rs.next() == false) {
                warningA.setText("El empleado no existe*");
                for (int i = jTable1.getRowCount() - 1; i >= 0; i--) {
                    ((DefaultTableModel) jTable1.getModel()).removeRow(i);
                }
                rs.close();
                stmt.close();
                cn.close();
            } else {
                busquedaSQL = "SELECT * FROM NOMINAS WHERE NOMBRE = '" + termino + "';";
                System.out.println(busquedaSQL);

                rs = stmt.executeQuery(busquedaSQL);

                while (rs.next()) {
                    jTextFieldNombreA.setText(rs.getString(8));
                    jTextFieldCargoA.setText(rs.getString(9));
                    String sueldo = Double.toString(rs.getDouble(10));
                    jTextFieldSueldoA.setText(sueldo);
                }
                rs.close();
                stmt.close();
                cn.close();
            }
            System.out.println("Secretaria busco por NOMBRE a las " + calendar.getTime().getHours() + ":" + calendar.getTime().getMinutes() + ":" + calendar.getTime().getSeconds() + " el " + calendar.getTime().getDay() + "/" + calendar.getTime().getMonth() + "/" + ((calendar.getTime().getYear()) + 1900));

        } catch (SQLException sq2) {
            JOptionPane.showMessageDialog(null, "Error al buscar el registro");
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        login.setVisible(false);
        ingreso.setVisible(true);
        nomina.setVisible(false);
        menuSecre.setVisible(false);
        actualizar.setVisible(false);
        menuGerente.setVisible(false);
        delete.setVisible(false);
        registro.setVisible(false);
        infoEmple.setVisible(false);
        jTextFieldNombre.setText("");
        jTextFieldCargo.setText("");
        jTextFieldCargo.setText("");

        System.out.println("Secretaria accedio a ingresar un nuevo empleado a las " + calendar.getTime().getHours() + ":" + calendar.getTime().getMinutes() + ":" + calendar.getTime().getSeconds() + " el " + calendar.getTime().getDay() + "/" + calendar.getTime().getMonth() + "/" + ((calendar.getTime().getYear()) + 1900));
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here:
        login.setVisible(false);
        ingreso.setVisible(false);
        nomina.setVisible(true);
        menuSecre.setVisible(false);
        actualizar.setVisible(false);
        menuGerente.setVisible(false);
        delete.setVisible(false);
        registro.setVisible(false);
        infoEmple.setVisible(false);
        System.out.println("Secretaria accedio a nomina a las " + calendar.getTime().getHours() + ":" + calendar.getTime().getMinutes() + ":" + calendar.getTime().getSeconds() + " el " + calendar.getTime().getDay() + "/" + calendar.getTime().getMonth() + "/" + ((calendar.getTime().getYear()) + 1900));
        rol = 1;
        Conectadb sqlite = new Conectadb();
        Connection cn = sqlite.Conectar();
        try {
            Statement stmt = cn.createStatement();
            ResultSet rs;
            String vt = null;
            vt = "SELECT * FROM NOMINAS;";

            rs = stmt.executeQuery(vt);

            DefaultTableModel tableModel = (DefaultTableModel) jTable1.getModel();
            Object[] filas = new Object[jTable1.getColumnCount()];
            for (int i = jTable1.getRowCount() - 1; i >= 0; i--) {
                ((DefaultTableModel) jTable1.getModel()).removeRow(i);
            }
            while (rs.next()) {
                filas[0] = rs.getString(8);
                filas[1] = rs.getString(9);
                filas[2] = rs.getDouble(10);
                filas[3] = rs.getDouble(1);
                filas[4] = rs.getDouble(2);
                filas[5] = rs.getDouble(3);
                filas[6] = rs.getDouble(4);
                filas[7] = rs.getDouble(5);
                filas[8] = rs.getDouble(6);
                filas[9] = rs.getDouble(7);

                tableModel.addRow(filas);
            }
            rs.close();
            stmt.close();
            cn.close();

        } catch (SQLException sq2) {
            JOptionPane.showMessageDialog(null, "Error al actualizar el registro");
        }
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        login.setVisible(false);
        ingreso.setVisible(false);
        nomina.setVisible(false);
        menuSecre.setVisible(false);
        actualizar.setVisible(true);
        menuGerente.setVisible(false);
        delete.setVisible(false);
        registro.setVisible(false);
        infoEmple.setVisible(false);
        jTextFieldBA.setText("");
        jTextFieldNombreA.setText("");
        jTextFieldCargoA.setText("");
        jTextFieldSueldoA.setText("");
        System.out.println("Secretaria accedio a actualizar un empleado a las " + calendar.getTime().getHours() + ":" + calendar.getTime().getMinutes() + ":" + calendar.getTime().getSeconds() + " el " + calendar.getTime().getDay() + "/" + calendar.getTime().getMonth() + "/" + ((calendar.getTime().getYear()) + 1900));
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        // TODO add your handling code here:
        login.setVisible(true);
        ingreso.setVisible(false);
        nomina.setVisible(false);
        menuSecre.setVisible(false);
        actualizar.setVisible(false);
        menuGerente.setVisible(false);
        delete.setVisible(false);
        registro.setVisible(false);
        infoEmple.setVisible(false);
        warning.setText("");
        jTextFieldUsuario.setText("");
        jPasswordField1.setText("");
        System.out.println("Gerente salio del sistema a las " + calendar.getTime().getHours() + ":" + calendar.getTime().getMinutes() + ":" + calendar.getTime().getSeconds() + " el " + calendar.getTime().getDay() + "/" + calendar.getTime().getMonth() + "/" + ((calendar.getTime().getYear()) + 1900));
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
        // TODO add your handling code here:
        login.setVisible(true);
        ingreso.setVisible(false);
        nomina.setVisible(false);
        menuSecre.setVisible(false);
        actualizar.setVisible(false);
        menuGerente.setVisible(false);
        delete.setVisible(false);
        registro.setVisible(false);
        infoEmple.setVisible(false);
        warning.setText("");
        jTextFieldUsuario.setText("");
        jPasswordField1.setText("");
        System.out.println("Gerente salio del sistema a las " + calendar.getTime().getHours() + ":" + calendar.getTime().getMinutes() + ":" + calendar.getTime().getSeconds() + " el " + calendar.getTime().getDay() + "/" + calendar.getTime().getMonth() + "/" + ((calendar.getTime().getYear()) + 1900));
    }//GEN-LAST:event_jButton10ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        // TODO add your handling code here:
        login.setVisible(false);
        ingreso.setVisible(false);
        nomina.setVisible(true);
        menuSecre.setVisible(false);
        actualizar.setVisible(false);
        menuGerente.setVisible(false);
        delete.setVisible(false);
        registro.setVisible(false);
        infoEmple.setVisible(false);
        System.out.println("Gerente accedio a nomina a las " + calendar.getTime().getHours() + ":" + calendar.getTime().getMinutes() + ":" + calendar.getTime().getSeconds() + " el " + calendar.getTime().getDay() + "/" + calendar.getTime().getMonth() + "/" + ((calendar.getTime().getYear()) + 1900));
        rol = 0;
        Conectadb sqlite = new Conectadb();
        Connection cn = sqlite.Conectar();
        try {
            Statement stmt = cn.createStatement();
            ResultSet rs;
            String vt = null;
            vt = "SELECT * FROM NOMINAS;";

            rs = stmt.executeQuery(vt);

            DefaultTableModel tableModel = (DefaultTableModel) jTable1.getModel();
            Object[] filas = new Object[jTable1.getColumnCount()];
            for (int i = jTable1.getRowCount() - 1; i >= 0; i--) {
                ((DefaultTableModel) jTable1.getModel()).removeRow(i);
            }
            while (rs.next()) {
                filas[0] = rs.getString(8);
                filas[1] = rs.getString(9);
                filas[2] = rs.getDouble(10);
                filas[3] = rs.getDouble(1);
                filas[4] = rs.getDouble(2);
                filas[5] = rs.getDouble(3);
                filas[6] = rs.getDouble(4);
                filas[7] = rs.getDouble(5);
                filas[8] = rs.getDouble(6);
                filas[9] = rs.getDouble(7);

                tableModel.addRow(filas);
            }
            rs.close();
            stmt.close();
            cn.close();

        } catch (SQLException sq2) {
            JOptionPane.showMessageDialog(null, "Error al encontrar el registro");
        }
    }//GEN-LAST:event_jButton8ActionPerformed

    private void jButtonADActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonADActionPerformed
        // TODO add your handling code here:
        login.setVisible(false);
        ingreso.setVisible(false);
        nomina.setVisible(false);
        menuSecre.setVisible(true);
        actualizar.setVisible(false);
        menuGerente.setVisible(false);
        delete.setVisible(false);
        registro.setVisible(false);
        infoEmple.setVisible(false);
        System.out.println("Secretaria regreso al menu menuSecre a las " + calendar.getTime().getHours() + ":" + calendar.getTime().getMinutes() + ":" + calendar.getTime().getSeconds() + " el " + calendar.getTime().getDay() + "/" + calendar.getTime().getMonth() + "/" + ((calendar.getTime().getYear()) + 1900));
    }//GEN-LAST:event_jButtonADActionPerformed

    private void jButtonBdeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonBdeleteActionPerformed
        // TODO add your handling code here:
        try {
            Conectadb sqlite = new Conectadb();
            Connection cn = sqlite.Conectar();
            Statement stmt = cn.createStatement();
            ResultSet rs;

            String termino = jTextFielddelete.getText();
            String busquedaSQL = "SELECT * FROM NOMINAS WHERE NOMBRE = '" + termino + "';";
            System.out.println(busquedaSQL);

            rs = stmt.executeQuery(busquedaSQL);
            if (rs.next() == false) {
                confirmacionD.setText("El empleado no existe*");
                rs.close();
                stmt.close();
                cn.close();
            } else {
                busquedaSQL = "SELECT * FROM NOMINAS WHERE NOMBRE = '" + termino + "';";
                confirmacionD.setText("Confirme los datos...");
                jButtonDelete.setVisible(true);
                System.out.println(busquedaSQL);

                rs = stmt.executeQuery(busquedaSQL);

                while (rs.next()) {
                    conDN.setText("Nombre: " + rs.getString(8));
                    conDC.setText("Cargo: " + rs.getString(9));
                    String sueldo = Double.toString(rs.getDouble(10));
                    conDS.setText("Sueldo: " + sueldo);
                }
                rs.close();
                stmt.close();
                cn.close();
            }
            System.out.println("Secretaria busco por NOMBRE a las " + calendar.getTime().getHours() + ":" + calendar.getTime().getMinutes() + ":" + calendar.getTime().getSeconds() + " el " + calendar.getTime().getDay() + "/" + calendar.getTime().getMonth() + "/" + ((calendar.getTime().getYear()) + 1900));

        } catch (SQLException sq2) {
            JOptionPane.showMessageDialog(null, "Error al buscar el registro");
        }
    }//GEN-LAST:event_jButtonBdeleteActionPerformed

    private void jButtonDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDeleteActionPerformed
        // TODO add your handling code here:
        try {
            Conectadb sqlite = new Conectadb();
            Connection cn = sqlite.Conectar();
            Statement stmt = cn.createStatement();
            String busquedaSQL = "DELETE FROM NOMINAS WHERE NOMBRE = '" + jTextFielddelete.getText() + "';";
            System.out.println(busquedaSQL);

            int r = stmt.executeUpdate(busquedaSQL);
            stmt.close();
            cn.close();
            confirmacionD.setText("El emplado fue eliminado con exito");
            jButtonDelete.setVisible(false);
            conDN.setText("");
            conDC.setText("");
            conDS.setText("");
            System.out.println("Secretaria elimino un empleado a las " + calendar.getTime().getHours() + ":" + calendar.getTime().getMinutes() + ":" + calendar.getTime().getSeconds() + " el " + calendar.getTime().getDay() + "/" + calendar.getTime().getMonth() + "/" + ((calendar.getTime().getYear()) + 1900));
        } catch (SQLException sq2) {
            JOptionPane.showMessageDialog(null, "Error al eliminar el registro");
        }
    }//GEN-LAST:event_jButtonDeleteActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        login.setVisible(false);
        ingreso.setVisible(false);
        nomina.setVisible(false);
        menuSecre.setVisible(false);
        actualizar.setVisible(false);
        menuGerente.setVisible(false);
        delete.setVisible(true);
        registro.setVisible(false);
        infoEmple.setVisible(false);
        confirmacionD.setText("");
        conDN.setText("");
        conDC.setText("");
        conDS.setText("");
        jButtonDelete.setVisible(false);
        System.out.println("Secretaria ingreso a eliminar un empleado a las " + calendar.getTime().getHours() + ":" + calendar.getTime().getMinutes() + ":" + calendar.getTime().getSeconds() + " el " + calendar.getTime().getDay() + "/" + calendar.getTime().getMonth() + "/" + ((calendar.getTime().getYear()) + 1900));
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton11ActionPerformed
        // TODO add your handling code here:
        Conectadb sqlite = new Conectadb();
        Connection cn = sqlite.Conectar();
        char[] p1 = jPasswordFieldCon1.getPassword();
        String pass1 = new String(p1);
        char[] p2 = jPasswordField2.getPassword();
        String pass2 = new String(p2);
        String rol = "";

        if (jComboBox2.getSelectedIndex() == 0) {
            rol = "gerente";
        }

        if (jComboBox2.getSelectedIndex() == 1) {
            rol = "secretaria";
        }

        if (jComboBox2.getSelectedIndex() == 2) {
            rol = "empleado";
        }

        if (pass1.equals(pass2)) {
            try {
                Statement stmt = cn.createStatement();
                String ins = "INSERT INTO ROLES VALUES(" + rol + "," + jTextFieldRU.getText() + "," + pass1 + ");";
                int r = stmt.executeUpdate(ins);
                stmt.close();
                cn.close();
                confirmacion.setText("Los datos han sido ingresados con exito*");
                System.out.println("Secretaria ingreso un nuevo empleado a las " + calendar.getTime().getHours() + ":" + calendar.getTime().getMinutes() + ":" + calendar.getTime().getSeconds() + " el " + calendar.getTime().getDay() + "/" + calendar.getTime().getMonth() + "/" + ((calendar.getTime().getYear()) + 1900));
            } catch (SQLException sqle) {
                JOptionPane.showMessageDialog(null, "Error al encontrar el registro");
            }
            jLabel27.setText("Empleado registrado exitosamente*");
            System.out.println("Gerente registro un empleado a las " + calendar.getTime().getHours() + ":" + calendar.getTime().getMinutes() + ":" + calendar.getTime().getSeconds() + " el " + calendar.getTime().getDay() + "/" + calendar.getTime().getMonth() + "/" + ((calendar.getTime().getYear()) + 1900));
        } else {
            jLabel25.setText("La contraseña no coincide*");
        }
    }//GEN-LAST:event_jButton11ActionPerformed

    private void jButton12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton12ActionPerformed
        // TODO add your handling code here:
        login.setVisible(false);
        ingreso.setVisible(false);
        nomina.setVisible(false);
        menuSecre.setVisible(false);
        actualizar.setVisible(false);
        menuGerente.setVisible(true);
        delete.setVisible(false);
        registro.setVisible(false);
        infoEmple.setVisible(false);
        System.out.println("Gerente regreso al menu menuGerente a las " + calendar.getTime().getHours() + ":" + calendar.getTime().getMinutes() + ":" + calendar.getTime().getSeconds() + " el " + calendar.getTime().getDay() + "/" + calendar.getTime().getMonth() + "/" + ((calendar.getTime().getYear()) + 1900));
    }//GEN-LAST:event_jButton12ActionPerformed

    private void jButton14ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton14ActionPerformed
        // TODO add your handling code here:
        login.setVisible(true);
        ingreso.setVisible(false);
        nomina.setVisible(false);
        menuSecre.setVisible(false);
        actualizar.setVisible(false);
        menuGerente.setVisible(false);
        delete.setVisible(false);
        registro.setVisible(false);
        infoEmple.setVisible(false);
        warning.setText("");
        jTextFieldUsuario.setText("");
        jPasswordField1.setText("");
        System.out.println("Empleado salio del sistema a las " + calendar.getTime().getHours() + ":" + calendar.getTime().getMinutes() + ":" + calendar.getTime().getSeconds() + " el " + calendar.getTime().getDay() + "/" + calendar.getTime().getMonth() + "/" + ((calendar.getTime().getYear()) + 1900));
    }//GEN-LAST:event_jButton14ActionPerformed

    private void jButton13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton13ActionPerformed
        // TODO add your handling code here:
        Conectadb sqlite = new Conectadb();
        Connection cn = sqlite.Conectar();
        try {
            Statement stmt = cn.createStatement();
            ResultSet rs;

            String busquedaSQL = "SELECT * FROM NOMINAS WHERE NOMBRE = '" + jTextFieldNom.getText() + "' AND CARGO = " + jTextFieldCar.getText() + ";";
            System.out.println(busquedaSQL);

            rs = stmt.executeQuery(busquedaSQL);
            if (rs.next() == false) {
                jLabel32.setText("Empleado o Cargo no existe*");
                rs.close();
                stmt.close();
                cn.close();
            } else {
                busquedaSQL = "SELECT * FROM NOMINAS WHERE NOMBRE = '" + jTextFieldNom.getText() + "' AND CARGO = " + jTextFieldCar.getText() + ";";
                System.out.println(busquedaSQL);

                rs = stmt.executeQuery(busquedaSQL);

                while (rs.next()) {
                    jLabelN.setText("Nombre: " + rs.getString(8));
                    jLabelC.setText("Cargo: " + rs.getString(9));
                    String sueldo = Double.toString(rs.getDouble(10));
                    jLabelS.setText("Sueldo: " + sueldo);
                    String comision = Double.toString(rs.getDouble(1));
                    jLabelComi.setText("Comision: " + comision);
                    String aux = Double.toString(rs.getDouble(2));
                    jLabelA.setText("Auxilio de transporte" + aux);
                    String dev = Double.toString(rs.getDouble(3));
                    jLabelD.setText("Total devengado: " + dev);
                    String salud = Double.toString(rs.getDouble(4));
                    jLabelSal.setText("Salud: " + salud);
                    String pension = Double.toString(rs.getDouble(5));
                    jLabelP.setText("Pension: " + pension);
                    String ded = Double.toString(rs.getDouble(6));
                    jLabelDedu.setText("Total deducido: " + ded);
                    String neto = Double.toString(rs.getDouble(7));
                    jLabelNe.setText("Neto pagado: " + neto);
                }
                rs.close();
                stmt.close();
                cn.close();
                System.out.println("Empleado confrimo informacion a las " + calendar.getTime().getHours() + ":" + calendar.getTime().getMinutes() + ":" + calendar.getTime().getSeconds() + " el " + calendar.getTime().getDay() + "/" + calendar.getTime().getMonth() + "/" + ((calendar.getTime().getYear()) + 1900));
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Error al encontrar el registro");
        }

    }//GEN-LAST:event_jButton13ActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        // TODO add your handling code here:
        login.setVisible(false);
        ingreso.setVisible(false);
        nomina.setVisible(false);
        menuSecre.setVisible(false);
        actualizar.setVisible(false);
        menuGerente.setVisible(false);
        delete.setVisible(false);
        registro.setVisible(true);
        infoEmple.setVisible(false);
        jTextFieldRU.setText("");
        jPasswordFieldCon1.setText("");
        jPasswordField2.setText("");
    }//GEN-LAST:event_jButton9ActionPerformed

    private void jButton16ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton16ActionPerformed
        // TODO add your handling code here:
        Conectadb sqlite = new Conectadb();
        Connection cn = sqlite.Conectar();
        String path = "G:\\SN\\src\\reportes\\report1.jasper";
        try {
            JasperReport jr = (JasperReport) JRLoader.loadObjectFromFile(path);
            JasperPrint jp = JasperFillManager.fillReport(jr, null, cn);
            JasperViewer jv = new JasperViewer(jp);
            jv.setVisible(true);
            cn.close();
        } catch (JRException | SQLException ex) {
            Logger.getLogger(SNJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton16ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SNJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SNJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SNJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SNJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SNJFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Buscar;
    private javax.swing.JButton IActualizar;
    private javax.swing.JPanel actualizar;
    private javax.swing.JButton atras;
    private javax.swing.JLabel conDC;
    private javax.swing.JLabel conDN;
    private javax.swing.JLabel conDS;
    private javax.swing.JLabel confirmacion;
    private javax.swing.JLabel confirmacionA;
    private javax.swing.JLabel confirmacionD;
    private javax.swing.JPanel delete;
    private javax.swing.JPanel infoEmple;
    private javax.swing.JPanel ingreso;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton12;
    private javax.swing.JButton jButton13;
    private javax.swing.JButton jButton14;
    private javax.swing.JButton jButton16;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JButton jButtonAD;
    private javax.swing.JButton jButtonBdelete;
    private javax.swing.JButton jButtonDelete;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JComboBox jComboBox2;
    private javax.swing.JComboBox jComboBoxBuscar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel jLabelA;
    private javax.swing.JLabel jLabelC;
    private javax.swing.JLabel jLabelComi;
    private javax.swing.JLabel jLabelD;
    private javax.swing.JLabel jLabelDedu;
    private javax.swing.JLabel jLabelN;
    private javax.swing.JLabel jLabelNe;
    private javax.swing.JLabel jLabelP;
    private javax.swing.JLabel jLabelS;
    private javax.swing.JLabel jLabelSal;
    private javax.swing.JPasswordField jPasswordField1;
    private javax.swing.JPasswordField jPasswordField2;
    private javax.swing.JPasswordField jPasswordFieldCon1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextFieldBA;
    private javax.swing.JTextField jTextFieldBuscar;
    private javax.swing.JTextField jTextFieldCar;
    private javax.swing.JTextField jTextFieldCargo;
    private javax.swing.JTextField jTextFieldCargoA;
    private javax.swing.JTextField jTextFieldNom;
    private javax.swing.JTextField jTextFieldNombre;
    private javax.swing.JTextField jTextFieldNombreA;
    private javax.swing.JTextField jTextFieldRU;
    private javax.swing.JTextField jTextFieldSueldo;
    private javax.swing.JTextField jTextFieldSueldoA;
    private javax.swing.JTextField jTextFieldUsuario;
    private javax.swing.JTextField jTextFielddelete;
    private javax.swing.JPanel login;
    private javax.swing.JButton loginIn;
    private javax.swing.JPanel menuGerente;
    private javax.swing.JPanel menuSecre;
    private javax.swing.JPanel nomina;
    private javax.swing.JPanel registro;
    private javax.swing.JButton salirG;
    private javax.swing.JButton salirSec;
    private javax.swing.JLabel warning;
    private javax.swing.JLabel warningA;
    private javax.swing.JLabel warningA2;
    private javax.swing.JLabel warningBuscar;
    // End of variables declaration//GEN-END:variables
}
